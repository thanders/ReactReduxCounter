{"version":3,"sources":["components/CounterOutput/CounterOutput.js","components/CounterControl/CounterControl.js","containers/Counter/Counter.js","store/actions.js","App.js","serviceWorker.js","store/reducers/counter.js","store/reducers/result.js","index.js"],"names":["counterOutput","props","className","value","counterControl","onClick","clicked","label","Counter","this","ctr","onIncrementCounter","onAddCounter","onResetCounter","onStoreResult","storedResults","map","strResult","key","id","onDeleteResult","Component","connect","state","counter","res","results","dispatch","type","result","resultElID","App","document","title","getElementsByTagName","content","Boolean","window","location","hostname","match","initialState","reducer","action","undefined","concat","Date","updatedArray","filter","rootReducer","combineReducers","counterReducer","resultReducer","store","createStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kWASeA,G,YANO,SAACC,GAAD,OAClB,yBAAKC,UAAU,iBAAf,YACcD,EAAME,SCITC,G,MANQ,SAACH,GAAD,OACnB,yBAAKC,UAAU,iBAAiBG,QAASJ,EAAMK,SAC1CL,EAAMM,SCETC,E,iLAGO,IAAD,OACJ,OACI,6BACI,kBAAC,EAAD,CAAeL,MAAOM,KAAKR,MAAMS,MACjC,kBAAC,EAAD,CAAgBH,MAAO,YAAYD,QAASG,KAAKR,MAAMU,qBACvD,kBAAC,EAAD,CAAgBJ,MAAO,UAAUD,QAASG,KAAKR,MAAMW,eACrD,kBAAC,EAAD,CAAiBL,MAAO,QAAQD,QAASG,KAAKR,MAAMY,iBACpD,6BACA,kBAAC,EAAD,CAAgBN,MAAO,eAAeD,QAAS,kBAAM,EAAKL,MAAMa,cAAc,EAAKb,MAAMS,QAEzF,6BACI,4BACKD,KAAKR,MAAMc,cAAcC,KAAI,SAAAC,GAAS,OAEnC,wBAAIC,IAAKD,EAAUE,GAAId,QAAU,kBAAM,EAAKJ,MAAMmB,eAAeH,EAAUE,MAA3E,IAAkFF,EAAUd,iB,GAjBlGkB,aA8CPC,eAlBS,SAAAC,GACpB,MAAO,CACLb,IAAKa,EAAMb,IAAIc,QACbT,cAAeQ,EAAME,IAAIC,YAKP,SAAAC,GACtB,MAAO,CACHhB,mBAAoB,kBAAMgB,EAAS,CAACC,KC7CnB,eD8CjBf,eAAgB,kBAAMc,EAAS,CAACC,KC7CnB,WD8CbhB,aAAc,kBAAMe,EAAS,CAACC,KC7CpB,MD6C2CzB,MAAO,MAC5DW,cAAe,SAACe,GAAD,OAAYF,EAAS,CAACC,KC7CjB,eD6CiDC,OAAQA,KAC7ET,eAAgB,SAACD,GAAD,OAAQQ,EAAS,CAACC,KC7Cb,gBD6C8CE,WAAYX,QAIxEG,CAA8Cd,GElC9CuB,MAff,WAII,OAHAC,SAASC,MAAO,8DAChBD,SAASE,qBAAqB,QAAQ,GAAGC,QAAQ,0DAGjD,yBAAKjC,UAAU,OACb,4BAAQA,UAAU,cAAlB,uBAIA,kBAAC,EAAD,QCFckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBChBAC,EAAe,CACjBjB,QAAS,GAiCEkB,EA9BC,WAAmC,IAAlCnB,EAAiC,uDAAzBkB,EAAcE,EAAW,uCAE9C,OAAQA,EAAOf,MACX,IHTiB,YGUb,OAAO,eACAL,EADP,CAEIC,QAASD,EAAMC,QAAU,IAGjC,IHda,QGeT,OAAO,eACAD,EADP,CAEIC,QAASiB,EAAajB,UAG9B,IHnBU,MGoBN,OAAO,eACAD,EADP,CAEIC,QAASD,EAAMC,QAAUmB,EAAOxC,QAGxC,UAAKyC,EAED,MAEJ,QACI,OAAOrB,IC9BbkB,EAAe,CACjBf,QAAQ,IAyBGgB,EAtBC,WAAmC,IAAlCnB,EAAiC,uDAAzBkB,EAAcE,EAAW,uCAE9C,OAAQA,EAAOf,MAEX,IJPoB,eIQhB,OAAO,eACAL,EADP,CAEIG,QAASH,EAAMG,QAAQmB,OAAO,CAAC1B,GAAI,IAAI2B,KAAQ3C,MAAOwC,EAAOd,WAGrE,IJZqB,gBIajB,IAAMkB,EAAexB,EAAMG,QAAQsB,QAAO,SAAAnB,GAAM,OAAIA,EAAOV,KAAOwB,EAAOb,cACzE,sBACOP,EADP,CAEIG,QAASqB,IAGjB,QACI,OAAOxB,ICVb0B,EAAcC,YAAgB,CAChCxC,IAAKyC,IACL1B,IAAK2B,MAEHC,EAAQC,YAAYL,GAG1BM,IAASC,OAAO,kBAAC,IAAD,CAAUH,MAAOA,GAAjB,IAAyB,kBAAC,EAAD,MAAzB,KAA8CrB,SAASyB,eAAe,SH8GhF,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0f15b9c5.chunk.js","sourcesContent":["import React from 'react';\nimport './CounterOutput.css';\n\nconst counterOutput = (props)=> (\n    <div className=\"CounterOutput\">\n        Counter: {props.value}\n    </div>\n);\n\nexport default counterOutput;\n","import React from 'react';\nimport './CounterControl.css'\n\nconst counterControl = (props) => (\n    <div className=\"CounterControl\" onClick={props.clicked}>\n        {props.label}\n    </div>\n);\n\nexport default counterControl;\n","import React, {Component} from \"react\";\nimport {connect} from 'react-redux';\nimport './Counter.css';\nimport CounterOutput from '../../components/CounterOutput/CounterOutput';\nimport CounterControl from '../../components/CounterControl/CounterControl';\nimport * as actionTypes from '../../store/actions';\n\nclass Counter extends Component{\n\n\n    render(){\n        return(\n            <div>\n                <CounterOutput value={this.props.ctr}/>\n                <CounterControl label= \"Increment\" clicked={this.props.onIncrementCounter}/>\n                <CounterControl label= \"Add ten\" clicked={this.props.onAddCounter}/>\n                <CounterControl  label= \"Reset\" clicked={this.props.onResetCounter}/>\n                <hr/>\n                <CounterControl label= \"Store Result\" clicked={() => this.props.onStoreResult(this.props.ctr)}/>\n\n                <div>\n                    <ul>\n                        {this.props.storedResults.map(strResult =>(\n                            // Anonymous function added to onClick - means that the function won't be executed when the component is rendered\n                            <li key={strResult.id} onClick={ () => this.props.onDeleteResult(strResult.id)}> {strResult.value}</li>\n                        ))}\n\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n}\n\n// Map React props to Redux state\nconst mapStateToProps = state => {\n    return {\n      ctr: state.ctr.counter,\n        storedResults: state.res.results\n    };\n};\n\n// Map store.dispatch to props so that React Components can dispatch actions to the reducer. The reducer will then change the state.\nconst mapDispatchToProps= dispatch => {\n    return {\n        onIncrementCounter: () => dispatch({type: actionTypes.INCREMENT}),\n        onResetCounter: () => dispatch({type: actionTypes.RESET}),\n        onAddCounter: () => dispatch({type: actionTypes.ADD, value: 10}),\n        onStoreResult: (result) => dispatch({type: actionTypes.STORE_RESULT, result: result}),\n        onDeleteResult: (id) => dispatch({type: actionTypes.DELETE_RESULT, resultElID: id})\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Counter);\n","export const INCREMENT = 'INCREMENT';\nexport const RESET = 'RESET';\nexport const ADD= 'ADD';\nexport const STORE_RESULT = 'STORE_RESULT';\nexport const DELETE_RESULT =Â 'DELETE_RESULT';\n","import React from 'react';\nimport './App.css';\nimport Counter from \"./containers/Counter/Counter\";\n\nfunction App() {\n    document.title =\"ReactReduxCounter | A small app to demo Redux state changes\";\n    document.getElementsByTagName(\"META\")[2].content=\"A small app to demo React-Redux state changes via props\";\n\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        React-Redux Counter\n      </header>\n\n      <Counter></Counter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions';\n\nconst initialState = {\n    counter: 0\n};\n\nconst reducer = (state = initialState, action) => {\n\n    switch( action.type ) {\n        case actionTypes.INCREMENT:\n            return {\n                ...state,\n                counter: state.counter + 1\n            };\n\n        case actionTypes.RESET:\n            return {\n                ...state,\n                counter: initialState.counter\n            };\n\n        case actionTypes.ADD:\n            return {\n                ...state,\n                counter: state.counter + action.value\n            };\n\n        case undefined:\n            // code\n            break;\n\n        default:\n            return state\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions';\n\nconst initialState = {\n    results:[]\n};\n\nconst reducer = (state = initialState, action) => {\n\n    switch( action.type ){\n\n        case actionTypes.STORE_RESULT:\n            return {\n                ...state,\n                results: state.results.concat({id: new Date(), value: action.result})\n            };\n\n        case actionTypes.DELETE_RESULT:\n            const updatedArray = state.results.filter(result => result.id !== action.resultElID);\n            return{\n                ...state,\n                results: updatedArray\n            };\n\n        default:\n            return state\n    }\n};\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Redux related imports\nimport { createStore, combineReducers } from 'redux';\n\nimport counterReducer from './store/reducers/counter';\nimport resultReducer from './store/reducers/result';\n\nimport { Provider } from  'react-redux';\n\nconst rootReducer = combineReducers({\n    ctr: counterReducer(),\n    res: resultReducer()\n});\nconst store = createStore(rootReducer);\n\n// Wrap <App> with <provider> and pass in store as a parameter\nReactDOM.render(<Provider store={store}> <App /> </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}